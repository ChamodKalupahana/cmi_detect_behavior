{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":102335,"databundleVersionId":12518947,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\n\nimport pandas as pd\nimport polars as pl\n\nimport kaggle_evaluation.cmi_inference_server","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-17T22:46:10.754762Z","iopub.execute_input":"2025-06-17T22:46:10.755101Z","iopub.status.idle":"2025-06-17T22:46:10.760458Z","shell.execute_reply.started":"2025-06-17T22:46:10.755079Z","shell.execute_reply":"2025-06-17T22:46:10.759363Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"class workflow:\n    train_dataset = []\n    test_dataset = []\n    train_demographics = []\n    test_demographics = []\n    sample_submission = []\n    input_to_model = []\n    ground_truth = []\n    model_prediction = []\n    model = 0\n\n    def __init__(self):\n        self.load_data()\n\n    def load_data(self):\n        # read csv\n        competition_file_path = \"/kaggle/input/cmi-detect-behavior-with-sensor-data\"\n        train_file_path = competition_file_path + \"/train.csv\"\n        test_file_path = competition_file_path + \"/test.csv\"\n        test_demographics_file_path = competition_file_path + \"/test_demographics.csv\"\n        train_demographics_file_path = competition_file_path + \"/train_demographics.csv\"\n        \n        self.train_dataset = pd.read_csv(train_file_path)\n        self.test_dataset = pd.read_csv(test_file_path)\n        self.test_demographics = pd.read_csv(test_demographics_file_path)\n        self.train_demographics = pd.read_csv(train_demographics_file_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-17T22:46:10.762170Z","iopub.execute_input":"2025-06-17T22:46:10.762504Z","iopub.status.idle":"2025-06-17T22:46:10.783904Z","shell.execute_reply.started":"2025-06-17T22:46:10.762481Z","shell.execute_reply":"2025-06-17T22:46:10.782826Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"workflow_instance = workflow()\nworkflow_instance.train_dataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-17T22:46:10.785055Z","iopub.execute_input":"2025-06-17T22:46:10.785392Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"workflow_instance.train_demographics","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Exporting small version for inital analysis","metadata":{}},{"cell_type":"code","source":"def save_csv(df, filename, max_rows = \"no input\"):\n    if (max_rows == \"no input\"):\n        df.to_csv(filename)\n    else:\n        df[0:max_rows].to_csv(filename)\n\nsave_csv(workflow_instance.train_dataset, \"train.csv\", 30)\nsave_csv(workflow_instance.test_dataset, \"test.csv\", 30)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def predict(sequence: pl.DataFrame, demographics: pl.DataFrame) -> str:\n    # Replace this function with your inference code.\n    # You can return either a Pandas or Polars dataframe, though Polars is recommended.\n    # Each prediction (except the very first) must be returned within 30 minutes of the batch features being provided.\n    print(pl)\n    return 'Cheek - pinch skin'","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"inference_server = kaggle_evaluation.cmi_inference_server.CMIInferenceServer(predict)\n\nif os.getenv('KAGGLE_IS_COMPETITION_RERUN'):\n    inference_server.serve()\nelse:\n    inference_server.run_local_gateway(\n        data_paths=(\n            '/kaggle/input/cmi-detect-behavior-with-sensor-data/test.csv',\n            '/kaggle/input/cmi-detect-behavior-with-sensor-data/test_demographics.csv',\n        )\n    )","metadata":{"execution":{"iopub.status.busy":"2025-06-16T22:25:18.300383Z","iopub.execute_input":"2025-06-16T22:25:18.300723Z","iopub.status.idle":"2025-06-16T22:25:19.376656Z","shell.execute_reply.started":"2025-06-16T22:25:18.300691Z","shell.execute_reply":"2025-06-16T22:25:19.375839Z"}}}]}