{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a65a77ce",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-10T23:41:48.738874Z",
     "iopub.status.busy": "2025-06-10T23:41:48.737808Z",
     "iopub.status.idle": "2025-06-10T23:41:50.984565Z",
     "shell.execute_reply": "2025-06-10T23:41:50.983640Z"
    },
    "papermill": {
     "duration": 2.252705,
     "end_time": "2025-06-10T23:41:50.986432",
     "exception": false,
     "start_time": "2025-06-10T23:41:48.733727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/train_demographics.csv\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/test_demographics.csv\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/train.csv\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/test.csv\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/cmi_inference_server.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/cmi_gateway.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/__init__.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/core/templates.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/core/base_gateway.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/core/relay.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/core/kaggle_evaluation.proto\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/core/__init__.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/core/generated/kaggle_evaluation_pb2.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/core/generated/kaggle_evaluation_pb2_grpc.py\n",
      "/kaggle/input/cmi-detect-behavior-with-sensor-data/kaggle_evaluation/core/generated/__init__.py\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ce770976",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-10T23:41:50.992544Z",
     "iopub.status.busy": "2025-06-10T23:41:50.992012Z",
     "iopub.status.idle": "2025-06-10T23:41:50.998347Z",
     "shell.execute_reply": "2025-06-10T23:41:50.997545Z"
    },
    "papermill": {
     "duration": 0.010994,
     "end_time": "2025-06-10T23:41:50.999883",
     "exception": false,
     "start_time": "2025-06-10T23:41:50.988889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class workflow:\n",
    "    train_dataset = []\n",
    "    test_dataset = []\n",
    "    sample_submission = []\n",
    "    input_to_model = []\n",
    "    ground_truth = []\n",
    "    model_prediction = []\n",
    "    model = 0\n",
    "\n",
    "    def __init__(self):\n",
    "        self.load_data()\n",
    "\n",
    "    def load_data(self):\n",
    "        # read csv\n",
    "        competition_file_path = \"/kaggle/input/cmi-detect-behavior-with-sensor-data\"\n",
    "        train_file_path = competition_file_path + \"/train.csv\"\n",
    "        test_file_path = competition_file_path + \"/test.csv\"\n",
    "        sample_subbission_file_path = competition_file_path + \"/sample_submission.csv\"\n",
    "        \n",
    "        self.train_dataset = pd.read_csv(train_file_path)\n",
    "        self.test_dataset = pd.read_csv(test_file_path)\n",
    "        self.sample_submission = pd.read_csv(sample_subbission_file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0fdedc1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-10T23:41:51.005257Z",
     "iopub.status.busy": "2025-06-10T23:41:51.004564Z",
     "iopub.status.idle": "2025-06-10T23:41:51.009341Z",
     "shell.execute_reply": "2025-06-10T23:41:51.008203Z"
    },
    "papermill": {
     "duration": 0.009131,
     "end_time": "2025-06-10T23:41:51.011016",
     "exception": false,
     "start_time": "2025-06-10T23:41:51.001885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "workflow_instance = workflow"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12518947,
     "sourceId": 102335,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.202407,
   "end_time": "2025-06-10T23:41:51.737397",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-10T23:41:43.534990",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
